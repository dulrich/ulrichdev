// Generated by CoffeeScript 1.7.1
(function() {
  var B, app, blog_load, blog_posts, cfg, cns, exp, fs, get_markdown, hlt, hmz, log, make_title, mkd, mkd_opt, not_found_404, pth, rdr, render_page, tof, _;

  exp = require('express');

  app = exp();

  B = require('bluebird');

  cns = require('consolidate');

  fs = require('fs');

  fs.readFileB = B.promisify(fs.readFile);

  fs.readdirB = B.promisify(fs.readdir);

  hlt = require('highlight.js');

  hmz = require('humanize-plus');

  _ = require('lodash');

  mkd = require('marked');

  pth = require('path');

  rdr = new mkd.Renderer;

  tof = require('toffee');

  cfg = {
    port: 4747
  };

  mkd_opt = {
    breaks: false,
    gfm: true,
    highlight: function(code) {
      return hlt.highlightAuto(code).value;
    },
    pedantic: false,
    renderer: rdr,
    sanitize: true,
    smartLists: true,
    smartypants: false,
    tables: true
  };

  log = console.log;

  blog_load = function(load) {
    return fs.readdirB('content').map(function(file) {
      return file.match(/^(\d\d\d\d-\d\d-\d\d)-(.+)(.md)$/);
    }).filter(function(file) {
      return file != null;
    }).map(function(file) {
      var out;
      out = {
        date: file[1],
        title: hmz.titleCase(file[2].replace(/-/g, ' ')),
        path: [file[1], file[2]].join('-')
      };
      if (!load) {
        return out;
      }
      return fs.readFileB(pth.join('content', file[0])).then(function(content) {
        out.content = mkd(content.toString('utf8'), mkd_opt);
        return out;
      });
    }).then(function(blogs) {
      return _(blogs).sortBy(function(blog) {
        return parseInt(blog.date.replace(/-/g, ''), 10);
      }).reverse().valueOf();
    })["catch"](function(err) {
      return [];
    });
  };

  blog_posts = function(start, count) {
    return blog_load(true).then(function(blogs) {
      return _(blogs).sortBy(function(blog) {
        return parseInt(blog.date.replace(/-/g, ''), 10);
      }).reverse().slice(start, count).valueOf();
    });
  };

  get_markdown = function(page) {
    return fs.readFileB(pth.join('content', "" + page + ".md")).then(function(file) {
      return mkd(file.toString('utf8'), mkd_opt);
    });
  };

  make_title = function(page) {
    var title;
    title = hmz.titleCase(page);
    return "UlrichDev | " + title;
  };

  render_page = function(res, body, page) {
    var _ref, _ref1, _ref2;
    return res.render('scaffold', {
      blog: (_ref = body.blog) != null ? _ref : '',
      posts: (_ref1 = body.posts) != null ? _ref1 : [],
      content: (_ref2 = body.content) != null ? _ref2 : body,
      page: page,
      title: make_title(page)
    });
  };

  not_found_404 = "<p>We could not find the page you asked for. It may not exist anymore, or you may just be wrong. If there are enough requests we might (re)create it.</p>";

  app.engine('toffee', cns.toffee);

  app.set('view engine', 'toffee');

  app.set('views', pth.join(__dirname, 'content'));

  app.enable('trust proxy');

  app.get('trust proxy');

  app.use('/static', exp["static"](pth.join(__dirname, 'static')));

  app.use('/(:page)?', function(req, res) {
    var page, _ref;
    page = (_ref = req.params.page) != null ? _ref : 'home';
    return get_markdown(page).then(function(body) {
      switch (page) {
        case 'home':
          return blog_posts(0, 3).then(function(posts) {
            return {
              content: body,
              posts: posts,
              blog: 'roll'
            };
          });
        case 'archive':
          return blog_load(false).then(function(posts) {
            return {
              content: body,
              posts: posts,
              blog: 'list'
            };
          });
        default:
          return body;
      }
    }).then(function(body) {
      return render_page(res, body, page);
    })["catch"](function(err) {
      return render_page(res, not_found_404, page);
    });
  });

  app.listen(cfg.port, function() {
    return log("Webserver started [express, port " + cfg.port + "]");
  });

}).call(this);
